[project]
name = "bluemira"
authors = [{name="The bluemira team"}]
description = """An integrated inter-disciplinary design tool for future fusion
 reactors, incorporating several modules, some of which rely on
 other codes, to carry out a range of typical conceptual fusion
 reactor design activities."""
readme = "README.md"
requires-python = ">=3.8"
dynamic=['version']
classifiers=[
        "Development Status :: 5 - Production/Stable",
        "Programming Language :: Python :: 3",
        "License :: OSI Approved :: GNU Lesser General Public License v2.1 or later (LGPLv2.1+)",
        "Operating System :: POSIX :: Linux",
    ]
dependencies = [
    "anytree",
    "asteval",
    "Babel",
    "click",
    "contourpy",
    "CoolProp",
    "fortranformat",
    "gmsh",
    "imageio",
    "matplotlib>=3.5",
    "meshio",
    "neutronics-material-maker==0.1.11",  # Crash on upgrade
    "nlopt",
    "numba",
    "numba-scipy",
    "numpy",
    "pint",
    "periodictable",
    "pyclipper",
    "pypet",
    "pyquaternion",
    "rich",
    "scikit-learn",
    "seaborn",
    "tables",
    "tabulate",
    "typeguard >3.0.0",
    "scipy",
]

[project.entry-points.numba_extensions]
init = "numba_scipy:_init_extension"

[project.urls]
homepage = "https://github.com/Fusion-Power-Plant-Framework/bluemira"
documentation = "https://bluemira.readthedocs.io"
repository = "https://github.com/Fusion-Power-Plant-Framework/bluemira"

[project.optional-dependencies]
dev = [
    "jupytext",
    "mypy",
    "myst-nb",
    "pre-commit",
    "pytest",
    "pytest-cov",
    "pytest-html",
    "pytest-metadata",
    "pytest-json-report",
    "ruff",
    "sphinx",
    "sphinx-autoapi",
    "sphinx_copybutton",
    "sphinx-rtd-theme",
]
examples = ["notebook", "jupytext"]
pinned = [
    "nlopt==2.7.1",
    "numba==0.58.1",
    "numba-scipy==0.3.1",
    "numpy==1.26.2",
    "matplotlib==3.7.3",
    "scipy==1.7.3",
]
openmoc = [
    "OpenMOC @git+https://github.com/mit-crpg/OpenMOC.git@7940c0b",
]
openmc = [
    "OpenMC @git+https://github.com/openmc-dev/openmc.git",
    "parametric-plasma-source @git+https://github.com/open-radiation-sources/parametric-plasma-source.git",
]
polyscope = ["polyscope"]

[build-system]
requires = ["setuptools>=62", "setuptools_scm[toml]>=7.0"]

[tool.setuptools.packages.find]
where = ["."]
include = ["bluemira*"]
exclude = ["tests*"]

[tool.setuptools_scm]

[tool.coverage.report]
"exclude_also" = [
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:"
]

[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = false
extra_checks = true
ignore_missing_imports = true
no_implicit_reexport = true
strict_equality = true
warn_no_return = false
warn_redundant_casts = true
warn_return_any = false
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
markers = [
    "longrun: Long running tests (>20s)",
    "reactor: Whole reactor tests",
    "private: Tests using private data",
    "classplot: Show and close figures after running all tests in class"
]
addopts = "--html=report.html --self-contained-html --strict-markers -r fEX"
filterwarnings = ['ignore:Matplotlib is currently using agg:UserWarning']

[tool.ruff]
target-version = "py38"
line-length = 89

exclude = [
    ".git",
    "__pycache__",
    "documentation",
    ".env",
    ".idea",
    ".pytest_cache",
    "htmlcov",
    "generated_data",
    # Deprecated modules
    "bluemira/utilities/optimiser.py",
    "bluemira/utilities/opt_tools.py",
    "bluemira/utilities/opt_problems.py",
    "bluemira/equilibria/positioner.py",
    "bluemira/equilibria/opt_problems.py",
    "bluemira/equilibria/opt_constraints.py",
    "bluemira/equilibria/opt_constraint_funcs.py",
    "bluemira/equilibria/opt_objectives.py",
    "bluemira/codes/_nlopt_api.py",
    "tests/equilibria/test_constraints.py",
]

[tool.ruff.format]
preview = true

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
    "ANN",  # type annotations
    "EM",  # string in error messages
    "PD",  # Pandas
    "B019",  # using cache memory leaks
    "COM812", # enforce trailing comma, disagrees with black/ruff format
    "D200",  # docs stuff
    "D203",
    "D205",
    "D301",
    "D400",
    "D401",
    "DTZ005",  # datetime timezone arg
    "E203",  # black/ruff format conflicts
    "FIX002",  # Line contains todo
    "ISC001",  # ruff format conflict
    "PLW1514", # Specify file open encoding
    "PTH123",  # use Path.open
    "TRY003",  # put error messages in error class
    # should remove
    "TD",  # standardise TODOs
    "ERA",  # remove commented out code
    "FBT",  # dont put bools in func definition
    "SLF001",  # private method use
    # remove when we move to python3.10
    "FA100",  # use future ann everywhere
    "UP006",  # type annotations
    "UP007",

]

[tool.ruff.lint.isort]
case-sensitive = true
known-first-party = ["bluemira", "eudemo", "eudemo_tests"]
force-to-top = ["freecad", "FreeCAD"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.ruff.lint.pylint]
# These should be made stricter
max-args = 30
max-statements = 73
max-returns = 12
max-branches = 23
max-public-methods = 38
max-bool-expr = 6

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "bluemira.base.reactor.FilterMaterial",
    "bluemira.utilities.opt_variables.ov",
    "bluemira.utilities.tools.ColourDescriptor",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pycodestyle]
max-doc-length = 89

[tool.ruff.lint.pep8-naming]
ignore-names = [
    "*PROCESS*",
    "*PLASMOD*",
    "*NAME*",
    "*BINARY*",
    "*CAD*",
    "*STP*",
    "*STL*",
    "*0D*",
    "*1D*",
    "*2D*",
    "*3D*",
    "*4D*",
    "*5D*",
    "BB",
    "*VV*",
    "*TS*",
    "RS",
    "*FW*",
    "CR",
    "EQ",
    "DIV",
    "*RM*",
    "*HCD*",
    "NB",
    "EC",
    "*IVC*",
    "*TF*",
    "*PF*",
    "*CS*",
    "*GS*",
    "*TFV*",
    "*TBR*",
    "*LCFS*",
    "*OIS*",
    "*JT60SA*",
    "*ITER*",
    "princetonD",
    "flatD",
    "negativeD",
    "negativeflatD",
    "R_0",
    "Z_0",
    "B_0",
    "I_p",
    "Ip",
    "A",
    "F",
    "Z_eff",
    "T_e*",
    "B*",
    "*B_*",
    "*Bt*",
    "*Bx*",
    "*Bz*",
    "*Bp*",
    "*Fz*",
    "*m_T*",
    "*DD*",
    "*DT*",
    "*SN*",
    "*DN*",
    "*CREATE*",
    "Psol_near",
    "Psol_far",
    "*Class",
    "*L_to_xz*",
    "*xz_to_L*",
    "*to_L*",
    "*L_to_zdz*",
    "get_Lmap",
    "set_Lmap",
    "*LFS*",
    "*HFS*",
    "*_OX_*",
    "*_F",
    "*eV",
    "I_not_dI",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",
    "F403",
]
"bluemira/__init__.py" = ["TID252"]
"bluemira/codes/__init__.py" = ["E402"]
"bluemira/codes/process/_model_mapping.py" = ["PLR6301"]
"bluemira/geometry/parameterisations.py" = ["E731"]
"bluemira/codes/plasmod/api/_outputs.py" = ["N815"]
"bluemira/codes/plasmod/api/_inputs.py" = ["N815"]
"data/*" = ["INP001"]
"scripts/*" = ["INP001", "CPY001", "T201"]
"setup.py" = ["CPY001"]
"documentation/source/*" = [
    "D100",
    "D101",
]
"examples/*" = ["INP001", "T201"]
"examples/geometry/optimisation_tutorial.ex.py" = ["W505", "E501"]
"examples/optimisation/geometry_optimisation.ex.py" = ["E402"]
"examples/optimisation/nonlinearly_constrained_problem.ex.py" = [
    "E402",
    "W505",
]
"eudemo/eudemo/reactor.py" = ["ARG001"]
"eudemo/eudemo_tests/*" = [
    "INP001",
    "PLR2004",
    "PLR6301",
    "S101",
    "F841",
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D202",
    "D205",
    "D210",
    "D300",
    "D301",
    "D401",
    "D403",
    "D404",
    "D406",
    "D409",
    "N802",
    "PT023",
    "T201",
]
"tests/*" = [
    "INP001",
    "PLR2004",
    "PLR6301",
    "PLR0904",
    "PLC1901",
    "S101",
    "F841",
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D202",
    "D205",
    "D210",
    "D300",
    "D301",
    "D401",
    "D403",
    "D404",
    "D406",
    "D409",
    "N802",
    "PT023",
    "T201",
]
"tests/codes/plasmod/test_profiles.py" = ["E221", "E501"]
"tests/geometry/test_private_tools.py" = ["E501"]
"tests/utilities/test_opt_variables.py" = ["E501"]
