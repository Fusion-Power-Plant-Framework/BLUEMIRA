Release Strategy
================

Schedule
--------

A new version of Bluemira is tagged every 6 weeks; marking the end of a
development cycle. When a new release is due,
a scheduled GitHub Actions workflow opens an issue to create a release.
A new release is then generated by the team using a GitHub actions workflow

When a release is generated, a pull request is automatically opened to
merge the ``develop_dependencies`` branch into ``develop``. This
updates, and freezes, the project's dependencies for the next release cycle.

Creating a Release
------------------

Releases are created using a
`GitHub actions workflow <https://github.com/Fusion-Power-Plant-Framework/bluemira/actions/workflows/release.yml>`__.
A maintainer triggers the workflow (specifying a version number),
which checks out ``main``, performs a fast-forward merge with ``develop``,
and pushes the changes to ``main``.

The release is made this way in order to use a fast-forward merge.
GitHub does not allow fast-forward merges through pull requests.
It is important for the histories of ``main`` and ``develop`` to be consistent,
otherwise there may be conflicts between the branches in the future.
It also means release tags are locatable in the histories of both branches.

In the unlikely event that ``main`` and ``develop``'s histories diverge
and a fast-forward merge is not possible,
the release pipeline will fail.
The maintainers must resolve these conflicts manually.

Versioning
----------

Bluemira's versioning strategy follows the scheme laid out in
`PEP440 <https://peps.python.org/pep-0440/>`__, but always uses 3
version numbers (major, minor, patch) as in semantic versioning. As per
the PEP, the version can optionally contain a suffix specifying a
pre-release (``.(a|b|rc)N``), post release (``.postN``), or development
release (``.devN``) number.

Release Notes
-------------

TBC.

Options:

-  Manually update a 'release-notes' file on every PR.
-  Look into generated notes using
   `towncrier <https://github.com/twisted/towncrier>`__ Python package.
-  Write them manually.
-  Use git commit messages.
