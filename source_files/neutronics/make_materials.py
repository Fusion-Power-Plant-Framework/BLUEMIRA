import openmc
import copy
import enum
from openmc.checkvalue import check_type, PathLike

class CheckedDict(dict):
    """A dictionary for which each element is type-checked as it's added

    Parameters
    ----------
    expected_type : type or Iterable of type
        Type(s) which each element should be
    name : str
        Name of data being checked
    items : Iterable, optional
        Items to initialize the list with

    """

    def __init__(self, expected_type, name, _dict=None):
        super().__init__()
        self.expected_type = expected_type
        self.name = name
        if _dict is not None:
            for k,v in _dict.items():
                self.__setitem__(k,v)

    def __setitem__(self, key, value):
        """Append item to list

        Parameters
        ----------
        key : str
            value to be appended
        value : object
            value to append

        """
        check_type(self.name, value, self.expected_type)
        super().__setitem__(key, value)


class MaterialsLibrary(CheckedDict):
    """A dictionary of materials"""

    def __init__(self, material_dict=None):
        super().__init__(openmc.Material, 'materials library', material_dict)

    def export_to_xml(self, path: PathLike = 'materials.xml'):
        return openmc.Materials(self.values()).export_to_xml(path)


class AutoPopulatingMaterialsLibrary(MaterialsLibrary):
    """A dictionary of materials that auto-complete the materials
        according to the type of blanket used"""
    def __init__(self):
        common_mats = _make_common_mats()
        super().__init__(common_mats)

    def populate_materials(self):
        _populate_materials(self)

    def __getitem__(self, key):
        """More helpful error message"""
        if key not in self.keys():
            raise KeyError(f"The material {key} hasn't been generated yet. Perhaps it needs to be generated by running self.populate_materials() or self.make_xxxx_mats()?")
        return super().__getitem__(key)

    ################################################################################################

    def make_dcll_mats(self, li_enrich_ao):
        """This function creates openmc material definitions for a dcll blanket"""
        he_cool_mat = openmc.Material(name='helium')
        he_cool_mat.add_nuclide('He4', 1.0, percent_type='ao')
        he_cool_mat.set_density('g/cm3', 0.008867)

        al2o3_mat = openmc.Material(name='Aluminium Oxide')
        al2o3_mat.add_nuclide('Al27', 1.0, percent_type='ao')
        al2o3_mat.add_nuclide('O16',  1.0, percent_type='ao')
        al2o3_mat.set_density('g/cm3', 3.95)

        PbLi_mat = openmc.Material(name='PbLi')
        PbLi_mat.add_element('Pb', 0.83, percent_type='ao')
        PbLi_mat.add_element('Li', 0.17, percent_type='ao',
                                enrichment=li_enrich_ao,
                                enrichment_target='Li6',
                                enrichment_type='ao'
                                )
        PbLi_mat.set_density('g/cm3', 9.4)
        
        lined_euro_mat = openmc.Material.mix_materials(
            name='Eurofer with Al2O3 lining',             
            materials=[self['eurofer_mat'],
                       al2o3_mat],
            fracs=[2. / 2.4, 
                   0.4 / 2.4 ],                           
            percent_type='vo')                              

        # Divertor definition from Neutronic analyses of the preliminary 
        #  design of a DCLL blanket for the EUROfusion DEMO power, 24 March 2016 
        # Using Eurofer instead of SS316LN
        self['inb_vv_mat'] = openmc.Material.mix_materials(
                name='inb_vacuum_vessel',     
                materials=[self['eurofer_mat'],
                           self['water_mat']],
                fracs=[0.8,
                       0.2],                    
                percent_type='vo')              
        self['inb_vv_mat'].id = 104
        
        ### Making first wall
        self['inb_fw_mat'] = openmc.Material.mix_materials(
            name='inb_first_wall',             
            materials=[self['tungsten_mat'],
                       self['eurofer_mat'],
                       he_cool_mat,
                       lined_euro_mat],
            fracs=[2. / 27., 
                   1.5 / 27.,
                   12. / 27.,
                   11.5 / 27.],           
            percent_type='vo')            
        self['inb_fw_mat'].id = 101

        ### Making blanket 
        self['inb_bz_mat'] = openmc.Material.mix_materials(
            name='inb_breeder_zone',            
            materials=[lined_euro_mat,
                       PbLi_mat],
            fracs=[0.0605 + 0.9395 * 0.05,
                   0.9395 * 0.95],         
            percent_type='vo')             
        self['inb_bz_mat'].id = 102

        self['inb_mani_mat'] = openmc.Material.mix_materials(
            name='inb_manifold',         
            materials=[self['eurofer_mat'],
                       self['inb_bz_mat']],
            fracs=[0.573, 
                   0.426],                
            percent_type='vo')            
        self['inb_mani_mat'].id = 103
        
        # Making divertor
        self['divertor_mat']  = clone_and_rename_mat( self['inb_vv_mat'], 301, 'divertor')
        self['div_fw_mat']    = clone_and_rename_mat( self['inb_fw_mat'], 302, 'div_first_wall')

    ################################################################################################

    def make_hcpb_mats(self, li_enrich_ao):
        """creates openmc material definitions for an hcpb blanket.
        HCPB Design Report, 26/07/2019
        WPBB-DEL-BB-1.2.1-T005-D001
        """
        he_cool_mat = openmc.Material(name='helium')
        he_cool_mat.add_nuclide('He4', 1.0, percent_type='ao')
        he_cool_mat.set_density('g/cm3', 0.008867)

        Be12Ti_mat = openmc.Material(name='Be12Ti')
        Be12Ti_mat.add_element('Be', 12.0, percent_type='ao')
        Be12Ti_mat.add_element('Ti', 1.0, percent_type='ao')
        Be12Ti_mat.set_density('g/cm3', 2.25)

        # Making enriched Li4SiO4 from elements with enrichment of Li6 enrichment
        Li4SiO4_mat = openmc.Material(name='lithium_orthosilicate')
        Li4SiO4_mat.add_element('Li', 4.0, percent_type='ao',
                                enrichment=li_enrich_ao,
                                enrichment_target='Li6',
                                enrichment_type='ao'
                                )
        Li4SiO4_mat.add_nuclide('Si28', 1.0, percent_type='ao')
        Li4SiO4_mat.add_nuclide('O16', 4.0, percent_type='ao')
        Li4SiO4_mat.set_density('g/cm3', 2.247 + 0.078 * (100. - li_enrich_ao) / 100.)  

        Li2TiO3_mat = openmc.Material(name='lithium_titanate')
        Li2TiO3_mat.add_element('Li', 2.0, percent_type='ao',
                                enrichment=li_enrich_ao,
                                enrichment_target='Li6',
                                enrichment_type='ao'
                                )
        Li2TiO3_mat.add_element('Ti', 1.0, percent_type='ao')
        Li2TiO3_mat.add_nuclide('O16', 3.0, percent_type='ao')
        Li2TiO3_mat.set_density('g/cm3', 3.28 + 0.06 * (100. - li_enrich_ao) / 100.) 

        KALOS_ACB_mat = openmc.Material.mix_materials(
            name='kalos_acb', # optional name of homogeneous material
            materials=[Li4SiO4_mat,
                       Li2TiO3_mat],
            fracs=[9*0.65 / (9*0.65 + 6*0.35), 
                   6*0.35 / (9*0.65 + 6*0.35)],  # molar combination adjusted to atom fractions
            percent_type='ao')                   # combination fraction type is by atom fraction

        KALOS_ACB_mat.set_density('g/cm3', 2.52 * 0.642 )   #  applying packing fraction
                                                            # Ref: Current status and future perspectives 
                                                            #  of EU ceramic breeder development
                
        self['inb_vv_mat'] = openmc.Material().mix_materials(
                name='inb_vacuum_vessel',      # optional name of homogeneous material
                materials=[self['eurofer_mat'],
                           self['water_mat']],
                fracs=[0.6,
                       0.4],                  
                percent_type='vo')           
        self['inb_vv_mat'].id = 104
        
        ### Making first wall
        self['inb_fw_mat'] = openmc.Material().mix_materials(
            name='inb_first_wall', # optional name of homogeneous material
            materials=[self['tungsten_mat'],
                       self['eurofer_mat'],
                       he_cool_mat],
            fracs=[2. / 27., 
                   25. * 0.573 / 27.,
                   25. * 0.427 / 27.],    
            percent_type='vo')            
        self['inb_fw_mat'].id = 101

        ### Making blanket
        structural_fraction_vo = 0.128 
        multiplier_fraction_vo = 0.493  # 0.647
        breeder_fraction_vo = 0.103 # 0.163
        helium_fraction_vo = 0.276 # 0.062
        
        self['inb_bz_mat'] = openmc.Material( material_id=102 ).mix_materials(
            name='inb_breeder_zone',        
            materials=[self['eurofer_mat'],
                       Be12Ti_mat,
                       KALOS_ACB_mat,
                       he_cool_mat],
            fracs=[structural_fraction_vo, 
                   multiplier_fraction_vo,
                   breeder_fraction_vo,
                   helium_fraction_vo],    
            percent_type='vo')             
        self['inb_bz_mat'].id = 102

        self['inb_mani_mat'] = openmc.Material( material_id=103 ).mix_materials(
            name='inb_manifold',      
            materials=[self['eurofer_mat'],
                       KALOS_ACB_mat,
                       he_cool_mat],
            fracs=[0.4724, 
                   0.0241,
                   0.5035],                
            percent_type='vo')            
        self['inb_mani_mat'].id = 103
        
        # Making divertor
        self['divertor_mat'] = clone_and_rename_mat( self['inb_vv_mat'], 301, 'divertor')
        self['div_fw_mat'] = openmc.Material().mix_materials(
                name='div_first_wall', 
                materials=[self['tungsten_mat'],
                           self['water_mat'],
                           self['eurofer_mat']],
                fracs=[16. / 25.,
                       4.5 / 25.,
                       4.5 / 25.],             
                percent_type='vo')             
        self['div_fw_mat'].id = 302
        
    ################################################################################################

    def make_wcll_mats(self, li_enrich_ao):
        """
        This function creates openmc material definitions for a wcll blanket
        Ref. D. Nevo and M. Oron-Carl, WCLL Design Report 2018, Eurofusion, WPBB-DEL-BB-3.2.1-T005-D001, June 2019.
        """
        
        PbLi_mat = openmc.Material(name='PbLi')
        PbLi_mat.add_element('Pb', 0.83, percent_type='ao')
        PbLi_mat.add_element('Li', 0.17, percent_type='ao',
                                enrichment=li_enrich_ao,
                                enrichment_target='Li6',
                                enrichment_type='ao'
                                )
        PbLi_mat.set_density('g/cm3', 9.538)

        # Divertor definition from Neutronic analyses of the preliminary 
        #  design of a DCLL blanket for the EUROfusion DEMO power, 24 March 2016 
        # Using Eurofer instead of SS316LN
        self['inb_vv_mat'] = openmc.Material.mix_materials(
                name='inb_vacuum_vessel',      
                materials=[self['eurofer_mat'],
                           self['water_mat']],
                fracs=[0.6,
                       0.4],                    
                percent_type='vo')              
        self['inb_vv_mat'].id = 104
        
        ### Making first wall
        self['inb_fw_mat']= openmc.Material.mix_materials(
            name='inb_first_wall',              
            materials=[self['tungsten_mat'],
                       self['water_mat'],
                       self['eurofer_mat']],
            fracs=[0.0766, 
                   0.1321,
                   0.7913],                
            percent_type='vo')          
        self['inb_fw_mat'].id = 101
        
        ### Making blanket 
        self['inb_bz_mat'] = openmc.Material.mix_materials(
            name='inb_breeder_zone',           
            materials=[self['tungsten_mat'],
                       PbLi_mat,
                       self['water_mat'],
                       self['eurofer_mat']],
            fracs=[0.0004, 
                   0.8238,
                   0.0176,
                   0.1582],               
            percent_type='vo') 
        self['inb_bz_mat'].id = 102

        self['inb_mani_mat'] = openmc.Material.mix_materials(
            name='inb_manifold',            
            materials=[PbLi_mat,
                       self['water_mat'],
                       self['eurofer_mat']],
            fracs= [0.2129,
                    0.2514,
                    0.5357],               
            percent_type='vo') 
        self['inb_mani_mat'].id =103

        # Making divertor
        self['divertor_mat']  = clone_and_rename_mat( self['eurofer_mat'], 301, 'divertor')
        self['div_fw_mat']    = clone_and_rename_mat( self['inb_fw_mat'],  302, 'div_first_wall')

    ################################################################################################
        
    def export_materials(self):
        """exports material defintions to xml"""
        material_list = openmc.Materials(self.values())
        return material_list.export_to_xml()

    @classmethod
    def create_complete_material_library(cls, blanket_type, li_enrich_ao, export_to_xml=True):
        make_method = getattr(cls, "make_{}_mats".format(blanket_type), None)
        if make_method is None:
            raise KeyError("Not a valid blanket_type; See BlanketType for allowed blanket_type.")
        self = AutoPopulatingMaterialsLibrary()
        make_method(self, li_enrich_ao)
        self.populate_materials()
        if export_to_xml:
            self.export_to_xml()
        return self

    # def create_complete_material_library(self, blanket_type, li_enrich_ao, export_to_xml=True):
    #     make_method = getattr(self, "make_{}_mats".format(blanket_type), None)
    #     if make_method is None:
    #         raise KeyError("Not a valid blanket_type; See BlanketType for allowed blanket_type.")
    #     make_method(li_enrich_ao)
    #     self.populate_materials()
    #     if export_to_xml:
    #         self.export_to_xml()


def _make_common_mats():
    """Makes materials that are common to all blankets"""
    material_lib = dict()

    tungsten_mat = openmc.Material(name='tungsten')
    tungsten_mat.add_nuclide('W182', 0.266, percent_type='ao')
    tungsten_mat.add_nuclide('W183', 0.143, percent_type='ao')
    tungsten_mat.add_nuclide('W184', 0.307, percent_type='ao')
    tungsten_mat.add_nuclide('W186', 0.284, percent_type='ao')
    tungsten_mat.set_density('g/cm3', 19.3)
    
    material_lib['tungsten_mat'] = tungsten_mat

    eurofer_mat = openmc.Material(name='eurofer')
    eurofer_mat.add_element('Fe', 0.9006, percent_type='wo')
    eurofer_mat.add_element('Cr', 0.0886, percent_type='wo')
    eurofer_mat.add_nuclide('W182', 0.0108 * 0.266, percent_type='wo')
    eurofer_mat.add_nuclide('W183', 0.0108 * 0.143, percent_type='wo')
    eurofer_mat.add_nuclide('W184', 0.0108 * 0.307, percent_type='wo')
    eurofer_mat.add_nuclide('W186', 0.0108 * 0.284, percent_type='wo')
    eurofer_mat.set_density('g/cm3', 7.78)
    
    material_lib['eurofer_mat'] = eurofer_mat
    
    water_mat = openmc.Material(name='water')
    water_mat.add_nuclide('H1',  0.667, percent_type='ao')
    water_mat.add_nuclide('O16', 0.333, percent_type='ao')
    water_mat.set_density('g/cm3', 0.866)
    
    material_lib['water_mat'] = water_mat
    
    return material_lib

# ----------------------------------------------------------------------------------------

def clone_and_rename_mat(mat_to_clone, new_id, new_name):
    """Clones and renames an OpenMC material"""
    new_mat    = mat_to_clone.clone()
    new_mat.id = new_id
    new_mat.name = new_name
    
    return new_mat

# ----------------------------------------------------------------------------------------

def _populate_materials(material_lib):
    """
    Need to duplicate materials as using material filter for scoring heating.
    Given a half-defined material_lib dictionary, populate the rest.
    """
    material_lib['outb_fw_mat']   = clone_and_rename_mat( material_lib['inb_fw_mat'],   201, 'outb_first_wall')
    material_lib['outb_bz_mat']   = clone_and_rename_mat( material_lib['inb_bz_mat'],   202, 'outb_breeder_zone')
    material_lib['outb_mani_mat'] = clone_and_rename_mat( material_lib['inb_mani_mat'], 203, 'outb_manifold')
    material_lib['outb_vv_mat']   = clone_and_rename_mat( material_lib['inb_vv_mat'],   204, 'outb_vacuum_vessel')
    material_lib['tf_coil_mat']   = clone_and_rename_mat( material_lib['eurofer_mat'],  401, 'tf_coil')
    material_lib['container_mat'] = clone_and_rename_mat( material_lib['inb_vv_mat'],   501, 'container')
    # sf = surface
    material_lib['inb_sf_mat']    = clone_and_rename_mat( material_lib['eurofer_mat'],  601, 'inb_sf')
    material_lib['outb_sf_mat']   = clone_and_rename_mat( material_lib['eurofer_mat'],  602, 'outb_sf')
    material_lib['div_sf_mat']    = clone_and_rename_mat( material_lib['eurofer_mat'],  603, 'div_sf')
    return material_lib

# ----------------------------------------------------------------------------------------

################################################################################################


# BlanketTypeRaw =
BlanketType = enum.Enum("BlanketType", [method_name[5:-5] for method_name in dir(AutoPopulatingMaterialsLibrary)
                                   if method_name.startswith('make_') and method_name.endswith('_mats')])

# class BlanketType(BlanketTypeRaw):
    # @classmethod
    # def get_allowed_types(cls):
    #     """Give an alias to _member_map_ so that the enumerated members are more explicit and easier to extract."""
    #     return cls._member_map_