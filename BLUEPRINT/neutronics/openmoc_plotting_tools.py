# bluemira is an integrated inter-disciplinary design tool for future fusion
# reactors. It incorporates several modules, some of which rely on other
# codes, to carry out a range of typical conceptual fusion reactor design
# activities.
#
# Copyright (C) 2021 M. Coleman, J. Cook, F. Franza, I.A. Maione, S. McIntosh, J. Morris,
#                    D. Short
#
# bluemira is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# bluemira is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with bluemira; if not, see <https://www.gnu.org/licenses/>.

"""
Tools for plotting using OpenMOC
"""

# Common imports
import matplotlib.pyplot as plt

# Import OpenMOC and it's plotter
from openmoc import plotter as plotter


def plot_spatial_custom_fluxes(
    solver,
    fluxes,
    energy_groups=[1],
    norm=False,
    gridsize=250,
    xlim=None,
    ylim=None,
    zlim=None,
    plane="xy",
    offset=0,
    get_figure=False,
    library="matplotlib",
    suptitle=None,
    title=None,
    filename=None,
    cmap="viridis",
):
    """
    Plot a color-coded 2D surface plot of the FSR scalar fluxes in log base 10 for one or
    more energy groups.

    The solver must have converged the FSR sources before calling this routine.

    Parameters
    ----------
    solver : openmoc.Solver
        An OpenMOC solver used to compute the flux
    fluxes : np.array
       The fluxes as generated by `openmoc.process.get_scalar_fluxes(solver)`.
       Must contain values in each FSR for each requested energy group i.e. a 2-D array
       with dimensions number_of_fsr x number_of_groups.
    energy_groups : Iterable of Integral
        The energy groups to plot (starting at 1 for the highest energy)
    norm : bool, optional
        Whether to normalize the fluxes to the mean (False by default)
    gridsize : Integral, optional
        The number of grid cells for the plot (250 by default)
    xlim : 2-tuple of Real, optional
        The minimim/maximum x-coordinates
    ylim : 2-tuple of Real, optional
        The minimim/maximum y-coordinates
    zlim : 2-tuple of Real, optional
        The minimim/maximum z-coordinates
    plane : {'xy', 'xz', 'yz'}
        The plane across which data is extracted and plotted
    offset : Real, optional
        The location of the plotted plane on the perpendicular axis
    get_figure : bool
        Whether to return the Matplotlib figure (only if library='matplotlib')
    library : {'matplotlib', 'pil'}
        The plotting library to use
    suptitle : str, optional
        The super title for the plots with format replacement of the group at index 0
        e.g. Group {0}.
    title : str, optional
        The title for the plots with format replacement of the offset at index 0
        e.g. offset {0}.
    filename : str, optional
        The filename for the plots with format replacement of the group at index 0
        and offset at index 1 e.g. group-{0}-offset-{1}.
    cmap : str, optional
        The colormap to use for the plot, by default "viridis".

    Returns
    -------
    fig : list of matplotlib.Figure or None
        The Matplotlib figures are returned if get_figure is True
    """
    # Initialize plotting parameters
    geometry = solver.getGeometry()
    plot_params = plotter.PlotParams()
    plot_params.geometry = geometry
    plot_params.offset = offset
    plot_params.gridsize = gridsize
    plot_params.library = library
    plot_params.xlim = xlim
    plot_params.ylim = ylim
    plot_params.zlim = zlim
    plot_params.plane = plane
    plot_params.colorbar = True
    plot_params.cmap = plt.get_cmap(cmap)
    plot_params.norm = norm

    # Initialize an empty list of Matplotlib figures if requestd by the user
    figures = []

    # Loop over all energy group and create a plot
    for index, group in enumerate(energy_groups):
        plot_params.suptitle = (
            "FSR Scalar Flux (Group {0})".format(group)
            if suptitle is None
            else suptitle.format(group)
        )
        if plot_params.plane == "xy":
            plot_params.title = (
                "z = {0}".format(plot_params.offset)
                if title is None
                else title.format(plot_params.offset)
            )
            plot_params.filename = (
                "fsr-flux-group-{0}-z-{1}".format(group, plot_params.offset)
                if filename is None
                else filename.format(group, plot_params.offset)
            )
        elif plot_params.plane == "xz":
            plot_params.title = (
                "y = {0}".format(plot_params.offset)
                if title is None
                else title.format(plot_params.offset)
            )
            plot_params.filename = (
                "fsr-flux-group-{0}-y-{1}".format(group, plot_params.offset)
                if filename is None
                else filename.format(group, plot_params.offset)
            )
        elif plot_params.plane == "yz":
            plot_params.title = (
                "x = {0}".format(plot_params.offset)
                if title is None
                else title.format(plot_params.offset)
            )
            plot_params.filename = (
                "fsr-flux-group-{0}-x-{1}".format(group, plot_params.offset)
                if filename is None
                else filename.format(group, plot_params.offset)
            )

        fig = plotter.plot_spatial_data(fluxes[:, index], plot_params, get_figure)

        if plot_params.geometry.isRootDomain():
            if get_figure:
                figures.append(fig[0])

    # Return figures if requested by the user
    if get_figure:
        return figures
